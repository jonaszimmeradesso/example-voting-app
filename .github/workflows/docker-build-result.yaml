name: docker build result

on:
  push:
    branches:
      - main
    paths:
      - 'result/**'
      - '.github/workflows/docker-build-result.yaml'
  pull-request:
    branches:
      - main
    paths:
      - 'result/**'
      - '.github/workflows/docker-build-result.yaml'

jobs:
  build-image:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Set up QEMU
	uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
	uses: docker/setup-buildx-action@v3

      - name: Run Trivy for all CVEs (non-blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.run_id }}
          exit-code: 0
          format: table

      - name: Run Trivy for HIGH,CRITICAL CVEs and report (blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.run_id }}
          exit-code: 1
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Build and export to Docker
        uses: docker/build-push-action@v5
        with:
          push: false
          load: true
          tags: ${{ github.run_id }}
          target: test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64


      - name: Unit Testing in Docker
        run: |
          docker run --rm ${{ github.run_id }} echo "run test commands here"

      - name: Test healthcheck in Docker Compose
        run: |
          export TESTING_IMAGE="${{ github.run_id }}"
          docker compose -f docker-compose.test.yml up --exit-code-from sut

      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push to GHCR
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: jonaszimmer/examplevotingapp_result:${{ github.run_id }}
          target: test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "test-cluster-1"
          args: >-
            --agents 1
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"

      - name: Smoke test deployment in k3d Kubernetes
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=https://ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }}
          export TESTING_IMAGE=jonaszimmer/examplevotingapp_result:"$GITHUB_RUN_ID"
          envsubst < manifests/deployment.yaml  | kubectl apply -f -
          kubectl rollout status deployment myapp
          kubectl exec deploy/myapp -- curl --fail localhost

      - name: Docker meta
	id: docker_meta
	uses: docker/metadata-action@v5
	with:
	  images: jonaszimmer/examplevotingapp_result
	  flavor: latest=false
	  tags: |
	    type=raw,value=04
	    type=raw,value=latest, enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
	    type=ref,event=pr
	    type=ref,event=branch
	    type=semver,pattern={{version}}

      - name: Call Docker Build
        uses: docker/build-push-action@v5

	permission:
	  contents: read
	  packages: write
	  pull-requests: write
	  security-events: write

        secrets:
	  dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}
	  dockerhub-password: ${{ secrets.DOCKERHUB_TOKEN }}

	with:
	  dockerhub-enable: true

	  image-names: jonaszimmer/examplevotingapp_result
	  context: result

	  platforms: linux/amd64,linux/arm64,linux/arm/v7

	  push: true
	  tags: ${{ steps.docker_meta.outputs.tags }}
	  labels: ${{ steps.docker_meta.outputs.labels }}

	  cache-from: type=gha
	  cache-to: type=gha,mode=max

      - name: Find comment for image tags
        uses: peter-evans/find-comment@v2
        if: github.event_name == 'pull_request'
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Docker image tag(s) pushed

      - name: Create or update comment for image tags
        uses: peter-evans/create-or-update-comment@v3
        if: github.event_name == 'pull_request'
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Docker image tag(s) pushed:
            ```text
            ${{ steps.docker_meta.outputs.tags }}
            ```

            Labels added to images:
            ```text
            ${{ steps.docker_meta.outputs.labels }}
            ```
          edit-mode: replace
